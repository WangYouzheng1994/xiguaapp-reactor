  ####支付回调消息方式一
    详情查看  com.cn.xiguaapp.pay.java.demo.controller.WxPayController#payBack，预先对payService设置好，支付回调处理器与拦截器(拦截器非必须)
```
    //增加支付回调消息拦截器
    payService.addPayMessageInterceptor(new WxPayMessageInterceptor());
    //设置回调消息处理
    payService.setPayMessageHandler(spring.getBean(WxPayMessageHandler.class));

```
回调编写

```
/**
 * 支付回调地址
 *
 * @param request 请求
 *
 * @return 返回对应的响应码
 *
 * 业务处理在对应的PayMessageHandler里面处理，在哪里设置PayMessageHandler，详情查看{@link com.cn.xiguaapp.pay.java.common.utils.encrypt.PayService#setPayMessageHandler(com.cn.xiguaapp.pay.java.common.utils.encrypt.PayMessageHandler)}
 *
 * 如果未设置 {@link com.cn.xiguaapp.pay.java.common.utils.encrypt.PayMessageHandler} 那么会使用默认的 {@link com.cn.xiguaapp.pay.java.common.utils.encrypt.DefaultPayMessageHandler}
 *
 */
    HttpServletRequest request
    //业务处理在对应的PayMessageHandler里面处理，在哪里设置PayMessageHandler，详情查看com.cn.xiguaapp.pay.java.common.utils.encrypt.PayService.setPayMessageHandler()
         response.getWriter().write(service.payBack(request.getParameterMap(), request.getInputStream()).toMessage());
```




  ####支付回调消息方式二，路由方式，有关路由的设置请看[公共模块_支付消息回调路由<针对多账户使用或者特殊业务使用>](https://gitee.com/egzosn/pay-java-parent/wikis/%E6%94%AF%E4%BB%98%E6%B6%88%E6%81%AF%E5%9B%9E%E8%B0%83%E8%B7%AF%E7%94%B1%3C%E9%92%88%E5%AF%B9%E5%A4%9A%E8%B4%A6%E6%88%B7%E4%BD%BF%E7%94%A8%E6%88%96%E8%80%85%E7%89%B9%E6%AE%8A%E4%B8%9A%E5%8A%A1%E4%BD%BF%E7%94%A8%3E?sort_id=91575)


`PayMessageRouter` 回复支付消息:handler需要返回一个`PayOutMessage`


```
    // 将PayMessage交给消息路由器

    HttpServletRequest request = ...;
    //支付账户配置
    PayConfigStorage storage = payService.getPayConfigStorage();
    // 获取支付回调返回的所有参数
    Map<String, Object> params = payService.getParameter2Map(request.getParameterMap(), request.getInputStream());
    //创建支付消息
    PayMessage message = new PayMessage(params, storage.getPayType(), storage.getMsgType().name());

    PayOutMessage outMessage = router.route(message);
    
    response.getWriter().write(outMessage.toMessage()）;

```

#### PayOutMessage

这里讲解两种方式创建`PayOutMessage`

方式一: 根据已知的方式指定消息类型创建：

```
    PayOutMessage.TEXT().content("success").build()；

```

方式二： 一种通用型的，通过支付服务进行创建(`PayService`), 每个`handler`都会有一个PayService的引用

```

    payService.getPayOutMessage("success", "成功");

```
 
